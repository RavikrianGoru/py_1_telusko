Advance/collective data types: holds multiple/group of values.
Advance/collective data types: holds multiple/group of values.
    list []
    tuple ()
    set {}
    frozenset

    dict
    range
    bytes
    bytearray

1) list : Collection/Group of elements enclosed in [] and each element by ','
          List is mutable
          Duplicate allowed
          Order is preserved
          index based forward direction 0 to n, backward direction -1 to -n
          heterogenous data
          Growable in nature

          ex:
            l1 = [10, 20, 20, 30, 10]
            l2 = [10, 'ravi', 20.5, 10]
            l3 = []

2) tuple : Readonly version of list
          Collection/Group of elements enclosed in () and each element by ','
          Tuple is immutable
          Duplicate allowed
          Order is preserved
          index based forward direction 0 to n, backward direction -1 to -n
          heterogenous data
          Not Growable in nature

          ex:
            t1 = (10, 20, 20, 30, 10)
            t2 = (10, 'ravi', 20.5, 10)
            t3 = ()
            t4 = (10,)
Difference between list and tuple

        List                        |   Tuple
        ---------------------------------------------------------------
        Mutable                     |   Immutable
        []                          |   ()
        PVM requires more memory    |   PVM requires less memory
        Performance is less         |   Faster access, Performance is more

3) Set: Collection/Group of elements enclosed in {} and each element by ','
          Duplicate not allowed
          Order is not preserved
          Set is mutable
          heterogenous data
          Growable in nature

          ex:
            s1 = {10, 20, 20, 30, 10}
            s2 = {10, 'ravi', 20.5, 10}
            s3 = {} this is dictionary not set
            s4 = set() this is empty set
Difference between List and Set.

        List                             |      Set
        -------------------------------------------------------------------
        Order is preserved               |      Order is not preserved
        Duplicate allowed                |      Duplicates are not allowed
        []                               |      {}
        Index based                      |      No index support

4) FrozenSet: Same as set but it is immutable
    s = {10, 20. 'ravi', 35.6}
    frozenset1 = frozenset(s)

        Tuple                            |       frozenset
        --------------------------------------------------------------------
        Order is preserved               |       Order is not preserved
        Duplicate allowed                |       Duplicates are not allowed
        Index based                      |       No index support


5) Dictionary: 2-D collection, (key,value) pair.
        Ex: {name:'ravi', age:28, sal:23000.00}
        Duplicate keys are not allowed
        Duplicate values are allowed
        No Order
        No index
        Mutable
        Growable
6) Range:   A sequence of numbers,
            Immutable
            Order is preserved
            Indexed
   Ex: range(10)
       range(10, 20, 2)
       range(50, 0, -10)

7) bytes: It will be use full while handling img / binary data.
          It allows only 0 to 255
          Immutable
          indexed

        l = [ 10, 20, 10, 12, 13]
        b = bytes(l)

        l = [10, 20, 30, 10, 256]
        b = bytes(l) # ValueError: bytes must be in range(0, 256)

8) bytearry: Same as bytes except bytearray is mutable.

        l = [ 10, 20, 10, 12, 13]
        b = bytearray(l)

9) None: means nothing. No value is associated. similar to null in java
         To make an object eligible for garbage collection.
         Throughout python only one None object is created.
         a = 10
         a = None # Eligible for garbage collection

         def m1():
            print('hello')
            return None





Type            Description                 Immutable        Order          Indexing            Duplicate
-------------------------------------------------------------------------------------------------------------------------
int             whole numbers                Immutable        N/A             N/A                  N/A
                a = 25

float           Floating point  values       Immutable        N/A             N/A                  N/A
                a = 24.65

complex         complex numbers              Immutable        N/A             N/A                  N/A
                x = 10 + 25j

bool            boolean values               Immutable        N/A             N/A                  N/A
                x = True

str             sequence of chars            Immutable        N/A            Indexed               N/A
                s = 'ravi'

list            ordered collection           Mutable          Ordered        Indexed              Duplicated
                l = [10, 10, 'ravi']

tuple           readonly version of list     Immutable        Ordered        Indexed              Duplicated
                t = (10,20,'ravi',10.5)

set             unordered collection         Mutable          UnOrdered      No Indexed           No Duplicate
                s = { 10, 23, 25, 'ravi'}

frozenset       Readonly version of set      Immutable        UnOrdered      No Indexed           No Duplicate
                s = { 10, 23, 25, 'ravi'}
                fs= frozenset(s)

dist            key-value pairs              Mutable          UnOrdered      No Indexed           No Duplicate for keys
                d={'name':'ravi','age':29}                                                        Duplicate for values

bytes           group of bytes(0 to 255)    Immutable         Ordered        Indexed                Duplicated
                l = [12,12,23,10]
                b = bytes(l)

bytearray       group of bytes(0 to 255)    Mutable           Ordered        Indexed                Duplicated
                l = [12,12,23,10]
                b = bytearray(l)

range           sequence of values          Immutable         Ordered        Indexed                No Duplicate

------------------------------------------------------------------------------------------------------------------------